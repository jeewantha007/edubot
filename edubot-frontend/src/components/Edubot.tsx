import React, { useState, useCallback, useEffect } from 'react';
import { ChatHeader } from './ChatHeader';
import { ChatWindow } from './ChatWindow';
import { ChatInput } from './ChatInput';
import { QuickActions } from './QuickActions';
import { ChatHistory } from './ChatHistory';
import { useToast } from '@/hooks/use-toast';
import { sendMessage, saveMessageToHistory, fetchChatHistory, fetchAllSessions, deleteChatSession } from '@/service/chatService';
import { getUserIdFromToken } from '@/lib/utils';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  rating?: number;
}

interface ChatSession {
  id: string;
  title: string;
  preview: string;
  timestamp: string;
  messageCount: number;
  category: 'learn' | 'practice' | 'help' | 'general';
}

export const Edubot: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [currentLanguage, setCurrentLanguage] = useState('en');
  const [isTyping, setIsTyping] = useState(false);
  const [isHistoryOpen, setIsHistoryOpen] = useState(false);
  const [currentChatId, setCurrentChatId] = useState('1');
  const [showQuickActions, setShowQuickActions] = useState(true);
  const { toast } = useToast();
  const [chatSessions, setChatSessions] = useState<ChatSession[]>([]);

  // Session ID logic
  const [sessionId, setSessionId] = useState<string | null>(null);
  useEffect(() => {
    let sid = localStorage.getItem('edubot_session_id');
    if (!sid) {
      sid = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      localStorage.setItem('edubot_session_id', sid);
    }
    setSessionId(sid);
    console.log('Edubot sessionId:', sid); // Debug log
  }, []);

  // Get userId from JWT token (declare only once, above all uses)
  const token = localStorage.getItem('jwt_token');
  const userId = getUserIdFromToken(token);

  // Fetch chat history from backend when sessionId or userId is set
  useEffect(() => {
    if (sessionId && userId) {
      fetchAllSessions(userId)
        .then(data => {
          if (data.sessions && data.sessions.length > 0) {
            // Find the session matching the current sessionId
            const session = data.sessions.find((s: any) => s.sessionId === sessionId);
            if (session && Array.isArray(session.messages)) {
              setMessages(session.messages.map((msg: any, idx: number) => ({
                id: msg._id || `msg_${idx}`,
                text: msg.text,
                sender: msg.role,
                timestamp: new Date(msg.timestamp),
                rating: msg.rating,
              })));
            } else {
              setMessages([]);
            }
          } else {
            setMessages([]);
          }
        })
        .catch(err => {
          console.error('Failed to fetch chat history:', err);
        });
    }
  }, [sessionId, userId]);

  // Helper to save message to backend
  const persistMessage = useCallback((msg: Message) => {
    if (!sessionId) return;
    saveMessageToHistory(sessionId, userId, {
      text: msg.text,
      role: msg.sender,
      timestamp: msg.timestamp,
    }).catch(err => {
      console.error('Failed to save message to backend:', err);
    });
  }, [sessionId, userId]);

  const generateMessageId = () => `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

  const getBotResponse = (userMessage: string, action?: string): string => {
    const responses = {
      en: {
        learn: "Great! Let's explore Political Science topics. Here are some key areas:\n\nЁЯУЪ **Constitutional Law**\nЁЯУЪ **Political Theory**\nЁЯУЪ **International Relations**\nЁЯУЪ **Public Administration**\n\nWhich topic interests you most?",
        practice: "Perfect! Let's practice with some MCQs. Here's your first question:\n\n**Question:** What is the main function of the executive branch in a democracy?\n\nA) Make laws\nB) Interpret laws\nC) Implement laws\nD) All of the above\n\nTake your time and choose the best answer! ЁЯОп",
        random: "Here's an interesting question for you:\n\nЁЯдФ **Can you explain the difference between a federal system and a unitary system of government?**\n\nTake a moment to think about it, and I'll help guide you through the answer!",
        help: "I'm here to help you succeed in A/L Political Science! ЁЯМЯ\n\nI can:\nтЬЕ Explain complex topics simply\nтЬЕ Give you practice MCQs\nтЬЕ Answer your specific questions\nтЬЕ Help with exam preparation\n\nWhat would you like to start with?",
        default: "That's a great question! In Political Science, it's important to understand the fundamentals. Let me help you explore this topic step by step. ЁЯУЦ\n\nCould you be more specific about what aspect you'd like to learn?"
      },
      si: {
        learn: "р╖Др╖Ьр╢│р╢║р╖Т! р╢пр╖Ър╖Бр╢┤р╖Пр╢╜р╢▒ р╖Ар╖Тр╢пр╖КтАНр╢║р╖П р╢╕р╖Пр╢нр╖Шр╢Ър╖П р╢Ер╢░р╖КтАНр╢║р╢║р╢▒р╢║ р╢Ър╢╗р╢╕р╖Ф. р╢╕р╖Щр╢▒р╖Кр╢▒ р╢┤р╖КтАНр╢╗р╢░р╖Пр╢▒ р╢Ър╖Кр╖Вр╖Ър╢нр╖КтАНр╢╗:\n\nЁЯУЪ **р╖Ар╖КтАНр╢║р╖Ар╖Гр╖Кр╢ор╖П р╢▒р╖Ур╢нр╖Тр╢║**\nЁЯУЪ **р╢пр╖Ър╖Бр╢┤р╖Пр╢╜р╢▒ р╢▒р╖КтАНр╢║р╖Пр╢║**\nЁЯУЪ **р╢вр╖Пр╢нр╖КтАНр╢║р╢▒р╖Кр╢нр╢╗ р╖Гр╢╢р╢│р╢нр╖П**\nЁЯУЪ **р╢╗р╖Пр╢вр╖КтАНр╢║ р╢┤р╢╗р╖Тр╢┤р╖Пр╢╜р╢▒р╢║**\n\nр╢Ър╖Фр╢╕р╢▒ р╢╕р╖Пр╢нр╖Шр╢Ър╖Пр╖А р╢Фр╢╢р╢з р╖Ар╢йр╖Пр╢нр╖Кр╢╕ р╢Ър╖Рр╢╕р╢нр╖Тр╢п?",
        practice: "р╖Др╖Ьр╢│р╢║р╖Т! MCQ р╖Гр╢╕р╢Ь р╢Ер╢╖р╖КтАНр╢║р╖Пр╖Г р╢Ър╢╗р╢╕р╖Ф. р╢╕р╖Щр╢▒р╖Кр╢▒ р╢Фр╢╢р╖Ъ р╢┤р╖Ер╢╕р╖Ф р╢┤р╖КтАНр╢╗р╖Бр╖Кр╢▒р╢║:\n\n**р╢┤р╖КтАНр╢╗р╖Бр╖Кр╢▒р╢║:** р╢┤р╖КтАНр╢╗р╢вр╖Пр╢нр╢▒р╖Кр╢нр╖КтАНр╢╗р╖Ар╖Пр╢пр╢║р╖Ъ р╖Ар╖Тр╢░р╖Пр╢║р╢Ъ р╖Бр╖Пр╢Ыр╖Пр╖Ар╖Ъ р╢┤р╖КтАНр╢╗р╢░р╖Пр╢▒ р╢Ър╖Пр╢╗р╖Кр╢║р╢║ р╢Ър╖Фр╢╕р╢Ър╖Кр╢п?\n\nA) р╢▒р╖Ур╢нр╖Т р╖Гр╢╕р╖Кр╢┤р╖Пр╢пр╢▒р╢║\nB) р╢▒р╖Ур╢нр╖Т р╢Ер╢╗р╖Кр╢о р╢Ър╢ор╢▒р╢║\nC) р╢▒р╖Ур╢нр╖Т р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Пр╢нр╖Кр╢╕р╢Ъ р╢Ър╖Тр╢╗р╖Ур╢╕\nD) р╢Йр╖Др╢н р╖Гр╖Тр╢║р╢╜р╖Кр╢╜\n\nр╢Ър╖Пр╢╜р╢║ р╢Ьр╢▒р╖Кр╢▒ р╖Гр╖Д р╖Др╖Ьр╢│р╢╕ р╢┤р╖Тр╖Ер╖Тр╢нр╖Фр╢╗ р╢нр╖Эр╢╗р╢▒р╖Кр╢▒! ЁЯОп",
        random: "р╢Фр╢╢р╢з р╢╗р╖Гр╖Ар╢нр╖К р╢┤р╖КтАНр╢╗р╖Бр╖Кр╢▒р╢║р╢Ър╖К:\n\nЁЯдФ **р╖Жр╖Щр╢йр╢╗р╢╜р╖К р╢Ър╖КтАНр╢╗р╢╕р╢║р╢Ър╖К р╖Гр╖Д р╢Тр╢Ър╖Ур╢║ р╢╗р╖Пр╢вр╖КтАНр╢║ р╢Ър╖КтАНр╢╗р╢╕р╢║р╢Ър╖К р╢Ер╢нр╢╗ р╖Ар╖Щр╢▒р╖Г р╢Ър╖Фр╢╕р╢Ър╖Кр╢п?**\n\nр╢зр╖Тр╢Ър╢Ър╖К р╖Др╖Тр╢нр╢╜р╖П р╢╢р╢╜р╢▒р╖Кр╢▒, р╢╕р╢╕ р╢Фр╢╢р╢з р╢┤р╖Тр╖Ер╖Тр╢нр╖Фр╢╗ р╖Гр╖Ьр╢║р╖П р╢Ьр╢▒р╖Кр╢▒ р╢Лр╢пр╖Ар╖К р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К!",
        help: "A/L р╢пр╖Ър╖Бр╢┤р╖Пр╢╜р╢▒ р╖Ар╖Тр╢пр╖КтАНр╢║р╖Пр╖Ар╖Ъ р╖Гр╖Пр╢╗р╖Кр╢ор╢Ъ р╖Ар╖Ур╢╕р╢з р╢╕р╢╕ р╢Фр╢╢р╢з р╢Лр╢пр╖Ар╖К р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К! ЁЯМЯ\n\nр╢╕р╢╕ р╢Ър╢╗р╢▒р╖Кр╢▒ р╢┤р╖Фр╖Ер╖Фр╖Ар╢▒р╖К:\nтЬЕ р╖Гр╢Вр╢Ър╖Ур╢╗р╖Кр╢л р╢╕р╖Пр╢нр╖Шр╢Ър╖П р╖Гр╢╗р╢╜р╖А р╢┤р╖Рр╖Др╖Рр╢пр╖Тр╢╜р╖Т р╢Ър╢╗р╢▒р╖Кр╢▒\nтЬЕ р╢┤р╖КтАНр╢╗р╖Пр╢║р╖Эр╢Ьр╖Тр╢Ъ MCQ р╢╜р╢╢р╖П р╢пр╖Щр╢▒р╖Кр╢▒\nтЬЕ р╢Фр╢╢р╖Ъ р╖Ар╖Тр╖Бр╖Ър╖В р╢┤р╖КтАНр╢╗р╖Бр╖Кр╢▒р╖Ар╢╜р╢з р╢┤р╖Тр╖Ер╖Тр╢нр╖Фр╢╗р╖Ф р╢пр╖Щр╢▒р╖Кр╢▒\nтЬЕ р╖Ар╖Тр╢╖р╖Пр╢Ь р╖Гр╖Цр╢пр╖Пр╢▒р╢╕ р╢Лр╢пр╖Ар╖К р╢Ър╢╗р╢▒р╖Кр╢▒\n\nр╢╕р╖Ьр╢▒р╖Ар╖Пр╢п р╢Фр╢╢ р╢┤р╢зр╢▒р╖К р╢Ьр╢▒р╖Кр╢▒ р╢Ър╖Рр╢╕р╢нр╖Т?",
        default: "р╖Др╖Ьр╢│ р╢┤р╖КтАНр╢╗р╖Бр╖Кр╢▒р╢║р╢Ър╖К! р╢пр╖Ър╖Бр╢┤р╖Пр╢╜р╢▒ р╖Ар╖Тр╢пр╖КтАНр╢║р╖Пр╖Ар╖Ъ р╢╕р╖Цр╢╜р╖Тр╢Ър╢║р╢▒р╖К р╢нр╖Ър╢╗р╖Фр╢╕р╖К р╢Ьр╢▒р╖Кр╢▒ р╖Ар╖Рр╢пр╢Ьр╢нр╖К. р╢╕р╢╕ р╢Фр╢╢р╢з р╢╕р╖Ъ р╢╕р╖Пр╢нр╖Шр╢Ър╖Пр╖А р╢┤р╖Тр╢║р╖Ар╢╗р╖Щр╢▒р╖К р╢┤р╖Тр╢║р╖Ар╢╗ р╢Ьр╖Ар╖Ър╖Вр╢лр╢║ р╢Ър╢╗р╢▒р╖Кр╢▒ р╢Лр╢пр╖Ар╖К р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К. ЁЯУЦ\n\nр╢Фр╢╢ р╢Йр╢Ьр╖Щр╢▒ р╢Ьр╢▒р╖Кр╢▒ р╢Ър╖Рр╢╕р╢нр╖Т р╢Ър╖Ьр╢зр╖Г р╢Ьр╖Рр╢▒ р╖Ар╖Рр╢йр╖Т р╖Ар╖Тр╖Гр╖Кр╢нр╢╗ р╢пр╖Щр╢▒р╖Кр╢▒ р╢┤р╖Фр╖Ер╖Фр╖Ар╢▒р╖Кр╢п?"
      },
      ta: {
        learn: "роЪро┐ро▒роирпНродродрпБ! роЕро░роЪро┐ропро▓рпН роЕро▒ро┐ро╡ро┐ропро▓рпН родро▓рпИрокрпНрокрпБроХро│рпИ роЖро░ро╛ропрпНро╡рпЛроорпН. роЗроЩрпНроХрпЗ роорпБроХрпНроХро┐роп рокроХрпБродро┐роХро│рпН:\n\nЁЯУЪ **роЕро░роЪро┐ропро▓роорпИрокрпНрокрпБ роЪроЯрпНроЯроорпН**\nЁЯУЪ **роЕро░роЪро┐ропро▓рпН роХрпЛроЯрпНрокро╛роЯрпБ**\nЁЯУЪ **роЪро░рпНро╡родрпЗроЪ роЙро▒ро╡рпБроХро│рпН**\nЁЯУЪ **рокрпКродрпБ роиро┐ро░рпНро╡ро╛роХроорпН**\n\nроОроирпНрод родро▓рпИрокрпНрокрпБ роЙроЩрпНроХро│рпБроХрпНроХрпБ рооро┐роХро╡рпБроорпН рокро┐роЯро┐роХрпНроХро┐ро▒родрпБ?",
        practice: "роЪро┐ро▒рокрпНрокрпБ! MCQ роХро│рпБроЯройрпН рокропро┐ро▒рпНроЪро┐ роЪрпЖропрпНро╡рпЛроорпН. роЗроЩрпНроХрпЗ роЙроЩрпНроХро│рпН роорпБродро▓рпН роХрпЗро│рпНро╡ро┐:\n\n**роХрпЗро│рпНро╡ро┐:** роЬройроиро╛ропроХродрпНродро┐ро▓рпН роиро┐ро░рпНро╡ро╛роХроХрпН роХро┐ро│рпИропро┐ройрпН роорпБроХрпНроХро┐роп роЪрпЖропро▓рпНрокро╛роЯрпБ роОройрпНрой?\n\nA) роЪроЯрпНроЯроЩрпНроХро│рпИ роЙро░рпБро╡ро╛роХрпНроХрпБродро▓рпН\nB) роЪроЯрпНроЯроЩрпНроХро│рпИ ро╡ро┐ро│роХрпНроХрпБродро▓рпН\nC) роЪроЯрпНроЯроЩрпНроХро│рпИ роироЯрпИроорпБро▒рпИрокрпНрокроЯрпБродрпНродрпБродро▓рпН\nD) роорпЗро▓рпЗ роЙро│рпНро│ роЕройрпИродрпНродрпБроорпН\n\nроирпЗро░роорпН роОроЯрпБродрпНродрпБроХрпНроХрпКрогрпНроЯрпБ роЪро┐ро▒роирпНрод рокродро┐ро▓рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН! ЁЯОп",
        random: "роЙроЩрпНроХро│рпБроХрпНроХрпБ роТро░рпБ роЪрпБро╡ро╛ро░ро╕рпНропрооро╛рой роХрпЗро│рпНро╡ро┐:\n\nЁЯдФ **роХрпВроЯрпНроЯро╛роЯрпНроЪро┐ роЕроорпИрокрпНрокрпБроХрпНроХрпБроорпН роТро▒рпНро▒рпИропро╛роЯрпНроЪро┐ роЕроорпИрокрпНрокрпБроХрпНроХрпБроорпН роЙро│рпНро│ ро╡рпЗро▒рпБрокро╛роЯрпБ роОройрпНрой?**\n\nроЪро┐ро▒ро┐родрпБ роирпЗро░роорпН ропрпЛроЪро┐родрпНродрпБрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН, рокродро┐ро▓рпИроХрпН роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡рпБро╡рпЗройрпН!",
        help: "A/L роЕро░роЪро┐ропро▓рпН роЕро▒ро┐ро╡ро┐ропро▓ро┐ро▓рпН ро╡рпЖро▒рпНро▒ро┐ рокрпЖро▒ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡рпБро╡рпЗройрпН! ЁЯМЯ\n\nроиро╛ройрпН роЪрпЖропрпНроп роорпБроЯро┐ропрпБроорпН:\nтЬЕ роЪро┐роХрпНроХро▓ро╛рой родро▓рпИрокрпНрокрпБроХро│рпИ роОро│ро┐роорпИропро╛роХ ро╡ро┐ро│роХрпНроХрпБродро▓рпН\nтЬЕ рокропро┐ро▒рпНроЪро┐ MCQ роХро│рпН ро╡ро┤роЩрпНроХрпБродро▓рпН\nтЬЕ роЙроЩрпНроХро│рпН роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБ рокродро┐ро▓ро│ро┐родрпНродро▓рпН\nтЬЕ родрпЗро░рпНро╡рпБ родропро╛ро░ро┐рокрпНрокрпБроХрпНроХрпБ роЙродро╡рпБродро▓рпН\n\nроирпАроЩрпНроХро│рпН роОродро┐ро▓рпН родрпКроЯроЩрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?",
        default: "роЕродрпБ роТро░рпБ роЪро┐ро▒роирпНрод роХрпЗро│рпНро╡ро┐! роЕро░роЪро┐ропро▓рпН роЕро▒ро┐ро╡ро┐ропро▓ро┐ро▓рпН, роЕроЯро┐рокрпНрокроЯрпИроХро│рпИрокрпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро╡родрпБ роорпБроХрпНроХро┐ропроорпН. роЗроирпНрод родро▓рпИрокрпНрокрпИ рокроЯро┐рокрпНрокроЯро┐ропро╛роХ роЖро░ро╛роп роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡рпБроХро┐ро▒рпЗройрпН. ЁЯУЦ\n\nроирпАроЩрпНроХро│рпН роХро▒рпНроХ ро╡ро┐ро░рпБроорпНрокрпБроорпН роЕроорпНроЪродрпНродрпИрокрпН рокро▒рпНро▒ро┐ роорпЗро▓рпБроорпН роХрпБро▒ро┐рокрпНрокро┐роЯ роорпБроЯро┐ропрпБрооро╛?"
      }
    };

    const langResponses = responses[currentLanguage as keyof typeof responses] || responses.en;
    
    if (action && action in langResponses) {
      return langResponses[action as keyof typeof langResponses];
    }
    
    return langResponses.default;
  };

  const simulateTyping = (callback: () => void, delay = 1500) => {
    setIsTyping(true);
    setTimeout(() => {
      setIsTyping(false);
      callback();
    }, delay);
  };

  const addMessage = useCallback((text: string, sender: 'user' | 'bot') => {
    const newMessage: Message = {
      id: generateMessageId(),
      text,
      sender,
      timestamp: new Date(),
    };
    setMessages(prev => [...prev, newMessage]);
    persistMessage(newMessage);
    return newMessage;
  }, [persistMessage]);

  // Helper to map frontend language code to backend
  const mapLanguage = (lang: string) => {
    if (lang === 'si') return 'sinhala';
    if (lang === 'ta') return 'tamil';
    return 'english';
  };

  const handleSendMessage = useCallback(async (text: string) => {
    setShowQuickActions(false);
    const userMessage = addMessage(text, 'user');
    setIsTyping(true);
    try {
      if (!sessionId) throw new Error('No sessionId');
      const response = await sendMessage(text, mapLanguage(currentLanguage), sessionId);
      addMessage(response.reply, 'bot');
    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessages = {
        en: 'Sorry, there was an error connecting to the server.',
        si: 'р╖Гр╢╕р╖Пр╖Ар╖Щр╢▒р╖Кр╢▒, р╖Гр╢╗р╖Кр╖Ар╢╗р╢║ р╖Гр╢╕р╢Я р╖Гр╢╕р╖Кр╢╢р╢▒р╖Кр╢░ р╖Ар╖Ур╢╕р╖Ъ р╢пр╖Эр╖Вр╢║р╢Ър╖К р╢Зр╢н.',
        ta: 'рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЪро░рпНро╡ро░рпБроЯройрпН роЗрогрпИрокрпНрокродро┐ро▓рпН рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ.'
      };
      const errorMsg = errorMessages[currentLanguage as keyof typeof errorMessages] || errorMessages.en;
      addMessage(errorMsg, 'bot');
    } finally {
      setIsTyping(false);
    }
  }, [addMessage, currentLanguage, sessionId]);

  const handleQuickAction = useCallback((action: string) => {
    setShowQuickActions(false);
    const actionTexts = {
      en: {
        learn: "I want to learn a topic",
        practice: "Let's practice MCQs",
        random: "Give me a random question",
        help: "How can you help me?"
      },
      si: {
        learn: "р╢╕р╢з р╢╕р╖Пр╢нр╖Шр╢Ър╖Пр╖Ар╢Ър╖К р╢Йр╢Ьр╖Щр╢▒ р╢Ьр╢▒р╖Кр╢▒ р╢Хр╢▒р╖Ъ",
        practice: "MCQ р╢Ер╢╖р╖КтАНр╢║р╖Пр╖Г р╢Ър╢╗р╢╕р╖Ф",
        random: "р╢╕р╢з р╢Ер╖Др╢╕р╖Кр╢╢р╖Щр╢▒р╖К р╢┤р╖КтАНр╢╗р╖Бр╖Кр╢▒р╢║р╢Ър╖К р╢пр╖Щр╢▒р╖Кр╢▒",
        help: "р╢Фр╢╢ р╢╕р╢з р╢Ър╖Ьр╖Др╖Ьр╢╕р╢п р╢Лр╢пр╖Ар╖К р╢Ър╢╗р╢▒р╖Кр╢▒ р╢┤р╖Фр╖Ер╖Фр╖Ар╢▒р╖К?"
      },
      ta: {
        learn: "роиро╛ройрпН роТро░рпБ родро▓рпИрокрпНрокрпИроХрпН роХро▒рпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпЗройрпН",
        practice: "MCQ рокропро┐ро▒рпНроЪро┐ роЪрпЖропрпНро╡рпЛроорпН",
        random: "роОройроХрпНроХрпБ роТро░рпБ роЪрпАро░ро▒рпНро▒ роХрпЗро│рпНро╡ро┐ роХрпКроЯрпБроЩрпНроХро│рпН",
        help: "роирпАроЩрпНроХро│рпН роОройроХрпНроХрпБ роОро╡рпНро╡ро╛ро▒рпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН?"
      }
    };

    const langTexts = actionTexts[currentLanguage as keyof typeof actionTexts] || actionTexts.en;
    const userText = langTexts[action as keyof typeof langTexts];
    
    if (userText) {
      addMessage(userText, 'user');
      
      // For MCQ practice, send the message to the backend instead of using local response
      if (action === 'practice') {
        setIsTyping(true);
        if (!sessionId) {
          addMessage('Session error. Please refresh the page.', 'bot');
          setIsTyping(false);
          return;
        }
        sendMessage(userText, mapLanguage(currentLanguage), sessionId)
          .then(response => {
            addMessage(response.reply, 'bot');
          })
          .catch(error => {
            addMessage('Sorry, there was an error connecting to the server.', 'bot');
          })
          .finally(() => {
            setIsTyping(false);
          });
      } else {
        // For other actions, use local responses
        simulateTyping(() => {
          const botResponse = getBotResponse(userText, action);
          addMessage(botResponse, 'bot');
        });
      }
    }
  }, [addMessage, currentLanguage, sessionId]);

  const handleRateMessage = useCallback((messageId: string, rating: number) => {
    setMessages(prev => 
      prev.map(msg => 
        msg.id === messageId 
          ? { ...msg, rating: rating > 0 ? rating : undefined }
          : msg
      )
    );
    
    const feedbackTexts = {
      en: rating > 0 ? "Thank you for your feedback! ЁЯШК" : "Thanks for letting me know. I'll try to improve! ЁЯдЧ",
      si: rating > 0 ? "р╢Фр╢╢р╖Ъ р╢┤р╖КтАНр╢╗р╢нр╖Тр╢┤р╖Эр╖Вр╢лр╢║р╢з р╖Гр╖Кр╢нр╖Цр╢нр╖Тр╢║р╖Т! ЁЯШК" : "р╢Ър╖Тр╢║р╖П р╢пр╖Ур╢╕ р╢Ьр╖Рр╢▒ р╖Гр╖Кр╢нр╖Цр╢нр╖Тр╢║р╖Т. р╢╕р╢╕ р╖Ар╖Рр╢йр╖Тр╢пр╖Тр╢║р╖Фр╢лр╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒ р╢Лр╢нр╖Кр╖Гр╖Пр╖Д р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К! ЁЯдЧ",
      ta: rating > 0 ? "роЙроЩрпНроХро│рпН роХро░рпБродрпНродрпБроХрпНроХрпБ роиройрпНро▒ро┐! ЁЯШК" : "роОройроХрпНроХрпБродрпН родрпЖро░ро┐ропрокрпНрокроЯрпБродрпНродро┐ропродро▒рпНроХрпБ роиройрпНро▒ро┐. роиро╛ройрпН роорпЗроорпНрокроЯрпБродрпНрод роорпБропро▒рпНроЪро┐рокрпНрокрпЗройрпН! ЁЯдЧ"
    };
    
    toast({
      description: feedbackTexts[currentLanguage as keyof typeof feedbackTexts] || feedbackTexts.en,
      duration: 2000,
    });
  }, [currentLanguage, toast]);

  const handleToggleHistory = () => {
    setIsHistoryOpen(!isHistoryOpen);
  };

  // Map backend session to ChatSession template
  function mapSessionToHistoryTemplate(session: any): ChatSession {
    const lastMsg = session.messages[session.messages.length - 1];
    return {
      id: session.sessionId,
      title: session.messages[0]?.text?.slice(0, 30) || 'Untitled Chat',
      preview: lastMsg?.text?.slice(0, 50) || '',
      timestamp: lastMsg?.timestamp || session.createdAt,
      messageCount: session.messages.length,
      category: 'general', // You can improve this if you have category info
    };
  }

  // Load all chat sessions when history tab is opened
  const loadChatSessions = useCallback(() => {
    fetchAllSessions(userId)
      .then(data => {
        if (data.sessions) {
          setChatSessions(data.sessions.map(mapSessionToHistoryTemplate));
        }
      })
      .catch(err => {
        console.error('Failed to fetch chat sessions:', err);
      });
  }, [userId]);

  // Delete chat session handler
  const handleDeleteChat = useCallback((chatId: string) => {
    deleteChatSession(chatId)
      .then(() => {
        loadChatSessions();
      })
      .catch(err => {
        console.error('Failed to delete chat session:', err);
      });
  }, [loadChatSessions]);

  useEffect(() => {
    if (isHistoryOpen) {
      loadChatSessions();
    }
  }, [isHistoryOpen, loadChatSessions]);

  // Update handleNewChat to generate a new sessionId and clear messages
  const generateSessionId = () => `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  const handleNewChat = () => {
    const newSessionId = generateSessionId();
    setSessionId(newSessionId);
    localStorage.setItem('edubot_session_id', newSessionId);
    setMessages([]);
    setCurrentChatId(newSessionId);
  };

  // Update handleSelectChat to set sessionId and currentChatId
  const handleSelectChat = (chatId: string) => {
    setSessionId(chatId);
    localStorage.setItem('edubot_session_id', chatId);
    setCurrentChatId(chatId);
    // Messages will be loaded by useEffect on sessionId
  };

  return (
    <div className="flex h-screen bg-background">
      <ChatHistory
        isOpen={isHistoryOpen}
        onClose={() => setIsHistoryOpen(false)}
        onNewChat={handleNewChat}
        onSelectChat={handleSelectChat}
        currentChatId={currentChatId}
        chatSessions={chatSessions}
        onDeleteChat={handleDeleteChat}
      />
      
      <div className="flex flex-col flex-1 min-w-0">
        <ChatHeader 
          currentLanguage={currentLanguage}
          onLanguageChange={setCurrentLanguage}
          onToggleHistory={handleToggleHistory}
          onToggleMobileMenu={handleToggleHistory}
        />
        
        <ChatWindow 
          messages={messages}
          onRate={handleRateMessage}
          isTyping={isTyping}
          language={currentLanguage}
        />
        
        {/* Only show QuickActions if showQuickActions is true and there are no messages */}
        {showQuickActions && messages.length === 0 && (
          <QuickActions 
            onActionClick={handleQuickAction}
            language={currentLanguage}
          />
        )}
        
        <ChatInput 
          onSendMessage={handleSendMessage}
          language={currentLanguage}
          disabled={isTyping}
        />
      </div>
    </div>
  );
};